name: test
on: [push, pull_request]
jobs:
  test:
    strategy:
      matrix:
        python-version: [3.7]
        os: [ubuntu]
    runs-on: ${{ matrix.os }}-latest
    env:
      TERM: xterm
    steps:
    - uses: actions/checkout@v1
    - name: Set up Python ${{ matrix.python-version }}
      uses: actions/setup-python@v1
      with:
        python-version: ${{ matrix.python-version }}
    - name: Install libs
      run: |
        sudo apt update
        sudo apt install libmpc-dev libmpfr-dev libgmp-dev
        sudo apt install libatlas-base-dev liblapack-dev gfortran
        sudo apt install graphviz texlive-xetex texlive-fonts-recommended \
                         fonts-freefont-otf latexmk lmodern
    - name: Install dependencies
      run: pip install -U .[interactive,develop,gmpy,exports,plot,docs]
    - name: Linting with flake8, flake8-rst and pylint
      run: |
        python -We:invalid -m compileall -f diofant -q
        python setup.py flake8
        flake8-rst
        pylint -j1 diofant
    - name: Building and testing docs
      env:
        PYTEST_ADDOPTS: -n auto --doctest-modules --ignore diofant/tests
      id: release
      run: |
        python setup.py test
        python setup.py build_sphinx -W -b html,latex
        make -C build/sphinx/latex all-pdf
        git clone https://github.com/diofant/diofant.github.io.git sphinx_docs
        rm -rf sphinx_docs/.git
        rsync -a --delete build/sphinx/html/ sphinx_docs/en/latest/
        pip install wheel
        python setup.py sdist bdist_wheel
        export VERSION=$(python -c 'import diofant;print(diofant.__version__)')
        echo ::set-output name=version::${VERSION}
        echo ::set-output name=short_version::$(echo ${VERSION}|sed 's/\([0-9]\+\.[0-9]\+\).*$/\1/')
        cp -a build/sphinx/html diofant-docs-html-${VERSION}
        zip -r dist/diofant-docs-html-${VERSION}.zip diofant-docs-html-${VERSION}
        cp -a build/sphinx/latex/diofant.pdf dist/diofant-docs-${VERSION}.pdf
    - name: Archive production artifacts
      uses: actions/upload-artifact@master
      with:
        name: dist
        path: dist
    - name: Coverage tests
      env:
        PYTEST_ADDOPTS: -n auto --cov diofant --cov-append -m "not slow and not xfail" --ignore docs
      run: |
        python setup.py test
    - name: Slow tests
      env:
        PYTEST_ADDOPTS: -n auto -m "slow and not xfail" --ignore docs
      run: python setup.py test
    - name: XFAILed tests
      if: github.event_name == 'push'
      env:
        PYTEST_ADDOPTS: -n auto -m "xfail" --ignore docs
      run: python setup.py test
    - name: Extra coverage tests
      env:
        PYTEST_ADDOPTS: -n auto --cov diofant --cov-append -m "not slow and not xfail" --ignore docs
      run: |
        pip uninstall -y gmpy2
        DIOFANT_GROUND_TYPES='gmpy' py.test diofant/tests/domains
        py.test diofant/tests/polys
        pip uninstall -y numpy
        py.test diofant/tests/external diofant/tests/utilities
    - name: Upload coverage data
      run: |
        for n in 1 2 3; do
          if codecov --required --verbose; then
            exit 0
          fi
          sleep $((n*160))
        done
        exit 1
    - name: Upload docs to Github Pages
      if: github.event_name == 'push'
      uses: peaceiris/actions-gh-pages@v2.5.0
      env:
        ACTIONS_DEPLOY_KEY: ${{ secrets.ACTIONS_DEPLOY_KEY }}
        EXTERNAL_REPOSITORY: diofant/diofant.github.io
        PUBLISH_BRANCH: master
        PUBLISH_DIR: sphinx_docs
    - name: Publish on Github Releases
      uses: softprops/action-gh-release@v1
      if: github.event_name == 'push' && startsWith(github.event.ref, 'refs/tags')
      env:
        GITHUB_TOKEN: ${{ secrets.RELEASES_DEPLOY_KEY }}
      with:
        files: dist/*
        draft: true
        prerelease: true
        name: "Diofant ${{ steps.release.outputs.version }}"
        body: "See [release notes](https://diofant.readthedocs.io/\
               en/latest/release/notes-${{ steps.release.outputs.short_version }}.html)."
    - name: Cleanup extra artifacts from dist
      run: rm -f dist/*.pdf dist/*.zip
    - name: Publish package on PyPI
      if: github.event_name == 'push' && startsWith(github.event.ref, 'refs/tags')
      uses: pypa/gh-action-pypi-publish@master
      with:
        password: ${{ secrets.pypi_password }}
